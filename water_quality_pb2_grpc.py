# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import water_quality_pb2 as water__quality__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in water_quality_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WaterControlCenterStub(object):
    """The server-side service definition for controlling and monitoring stations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetQualityData = channel.unary_unary(
                '/waterquality.WaterControlCenter/GetQualityData',
                request_serializer=water__quality__pb2.StationRequest.SerializeToString,
                response_deserializer=water__quality__pb2.StationResponse.FromString,
                _registered_method=True)
        self.ReportIssue = channel.unary_unary(
                '/waterquality.WaterControlCenter/ReportIssue',
                request_serializer=water__quality__pb2.IssueReport.SerializeToString,
                response_deserializer=water__quality__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.AddNeighbour = channel.unary_unary(
                '/waterquality.WaterControlCenter/AddNeighbour',
                request_serializer=water__quality__pb2.AddNeighbourRequest.SerializeToString,
                response_deserializer=water__quality__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.NotifyNeighbours = channel.unary_unary(
                '/waterquality.WaterControlCenter/NotifyNeighbours',
                request_serializer=water__quality__pb2.NeighbourNotification.SerializeToString,
                response_deserializer=water__quality__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.RegisterStation = channel.unary_unary(
                '/waterquality.WaterControlCenter/RegisterStation',
                request_serializer=water__quality__pb2.RegisterStationRequest.SerializeToString,
                response_deserializer=water__quality__pb2.RegisterStationResponse.FromString,
                _registered_method=True)


class WaterControlCenterServicer(object):
    """The server-side service definition for controlling and monitoring stations.
    """

    def GetQualityData(self, request, context):
        """Retrieve the quality data for a specific station.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportIssue(self, request, context):
        """Report an issue detected at a specific station.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNeighbour(self, request, context):
        """Add a station as a neighbour to another station.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyNeighbours(self, request, context):
        """Notify neighbour stations of an issue detected at a station.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterStation(self, request, context):
        """Register a new station with the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WaterControlCenterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetQualityData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQualityData,
                    request_deserializer=water__quality__pb2.StationRequest.FromString,
                    response_serializer=water__quality__pb2.StationResponse.SerializeToString,
            ),
            'ReportIssue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportIssue,
                    request_deserializer=water__quality__pb2.IssueReport.FromString,
                    response_serializer=water__quality__pb2.StatusResponse.SerializeToString,
            ),
            'AddNeighbour': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNeighbour,
                    request_deserializer=water__quality__pb2.AddNeighbourRequest.FromString,
                    response_serializer=water__quality__pb2.StatusResponse.SerializeToString,
            ),
            'NotifyNeighbours': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyNeighbours,
                    request_deserializer=water__quality__pb2.NeighbourNotification.FromString,
                    response_serializer=water__quality__pb2.StatusResponse.SerializeToString,
            ),
            'RegisterStation': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterStation,
                    request_deserializer=water__quality__pb2.RegisterStationRequest.FromString,
                    response_serializer=water__quality__pb2.RegisterStationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'waterquality.WaterControlCenter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('waterquality.WaterControlCenter', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WaterControlCenter(object):
    """The server-side service definition for controlling and monitoring stations.
    """

    @staticmethod
    def GetQualityData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/waterquality.WaterControlCenter/GetQualityData',
            water__quality__pb2.StationRequest.SerializeToString,
            water__quality__pb2.StationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportIssue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/waterquality.WaterControlCenter/ReportIssue',
            water__quality__pb2.IssueReport.SerializeToString,
            water__quality__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddNeighbour(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/waterquality.WaterControlCenter/AddNeighbour',
            water__quality__pb2.AddNeighbourRequest.SerializeToString,
            water__quality__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyNeighbours(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/waterquality.WaterControlCenter/NotifyNeighbours',
            water__quality__pb2.NeighbourNotification.SerializeToString,
            water__quality__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterStation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/waterquality.WaterControlCenter/RegisterStation',
            water__quality__pb2.RegisterStationRequest.SerializeToString,
            water__quality__pb2.RegisterStationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
